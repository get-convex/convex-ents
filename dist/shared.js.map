{"version":3,"sources":["../src/shared.ts"],"sourcesContent":["import {\n  DocumentByName,\n  FieldTypeFromFieldPath,\n  SystemDataModel,\n  TableNamesInDataModel,\n} from \"convex/server\";\nimport { EdgeConfig, GenericEdgeConfig, GenericEntsDataModel } from \"./schema\";\n\nexport type EntsSystemDataModel = {\n  [key in keyof SystemDataModel]: SystemDataModel[key] & {\n    edges: Record<string, never>;\n  };\n};\n\nexport type PromiseEdgeResult<\n  EdgeConfig extends GenericEdgeConfig,\n  MultipleRef,\n  MultipleField,\n  SingleOptional,\n  Single,\n> = EdgeConfig[\"cardinality\"] extends \"multiple\"\n  ? EdgeConfig[\"type\"] extends \"ref\"\n    ? MultipleRef\n    : MultipleField\n  : EdgeConfig[\"type\"] extends \"ref\"\n    ? SingleOptional\n    : EdgeConfig[\"optional\"] extends true\n      ? SingleOptional\n      : Single;\n\nexport type IndexFieldTypesForEq<\n  EntsDataModel extends GenericEntsDataModel,\n  Table extends TableNamesInDataModel<EntsDataModel>,\n  T extends string[],\n> = Pop<{\n  [K in keyof T]: FieldTypeFromFieldPath<\n    DocumentByName<EntsDataModel, Table>,\n    T[K]\n  >;\n}>;\n\ntype Pop<T extends any[]> = T extends [...infer Rest, infer _Last]\n  ? Rest\n  : never;\n\nexport function getEdgeDefinitions<\n  EntsDataModel extends GenericEntsDataModel,\n  Table extends TableNamesInDataModel<EntsDataModel>,\n>(entDefinitions: EntsDataModel, table: Table) {\n  return entDefinitions[table].edges as Record<\n    keyof EntsDataModel[Table][\"edges\"],\n    EdgeConfig\n  >;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AA6CO,SAAS,mBAGd,gBAA+B,OAAc;AAC7C,SAAO,eAAe,KAAK,EAAE;AAI/B;","names":[]}